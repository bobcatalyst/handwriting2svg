// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: handwriting.proto

package handwriting

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Compression int32

const (
	Compression_Unknown Compression = 0
	Compression_None    Compression = 1
	Compression_XZ      Compression = 4
)

// Enum value maps for Compression.
var (
	Compression_name = map[int32]string{
		0: "Unknown",
		1: "None",
		4: "XZ",
	}
	Compression_value = map[string]int32{
		"Unknown": 0,
		"None":    1,
		"XZ":      4,
	}
)

func (x Compression) Enum() *Compression {
	p := new(Compression)
	*p = x
	return p
}

func (x Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_handwriting_proto_enumTypes[0].Descriptor()
}

func (Compression) Type() protoreflect.EnumType {
	return &file_handwriting_proto_enumTypes[0]
}

func (x Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Compression.Descriptor instead.
func (Compression) EnumDescriptor() ([]byte, []int) {
	return file_handwriting_proto_rawDescGZIP(), []int{0}
}

type BaseMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Milliseconds since 2001-01-01 UTC.
	CreatedAt   int64        `protobuf:"fixed64,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ID          string       `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	Handwriting *Handwriting `protobuf:"bytes,4,opt,name=Handwriting,proto3" json:"Handwriting,omitempty"`
}

func (x *BaseMessage) Reset() {
	*x = BaseMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handwriting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseMessage) ProtoMessage() {}

func (x *BaseMessage) ProtoReflect() protoreflect.Message {
	mi := &file_handwriting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseMessage.ProtoReflect.Descriptor instead.
func (*BaseMessage) Descriptor() ([]byte, []int) {
	return file_handwriting_proto_rawDescGZIP(), []int{0}
}

func (x *BaseMessage) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *BaseMessage) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BaseMessage) GetHandwriting() *Handwriting {
	if x != nil {
		return x.Handwriting
	}
	return nil
}

// All uint16 are little endian
// Packed Float Format: float32(int16(uint16(<int16 from struct>)^uint16(0x8000)))
type Handwriting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	struct {
	//	  Width float16
	//	  Height float16
	//	}
	//
	// Handwriting ribbon size? Seems like the size used when sending via SMS.
	Size []byte `protobuf:"bytes,2,opt,name=Size,proto3" json:"Size,omitempty"`
	//	struct {
	//	  Origin struct {
	//	    X float16
	//	    Y float16
	//	  }
	//	  Size struct {
	//	    Width float16
	//	    Height float16
	//	  }
	//	}
	//
	// Box fits the provided points
	Frame []byte `protobuf:"bytes,3,opt,name=Frame,proto3" json:"Frame,omitempty"`
	// Number of arrays in Strokes
	StrokesCount int64 `protobuf:"varint,4,opt,name=StrokesCount,proto3" json:"StrokesCount,omitempty"`
	// If compressed, DecompressedLength is set.
	Compression Compression `protobuf:"varint,5,opt,name=Compression,proto3,enum=handwriting.Compression" json:"Compression,omitempty"`
	// If DataType is Compressed, size of decompressed data
	DecompressedLength *int64 `protobuf:"varint,6,opt,name=DecompressedLength,proto3,oneof" json:"DecompressedLength,omitempty"`
	// Not sure this is correct
	// Always 4
	Version int64 `protobuf:"varint,7,opt,name=Version,proto3" json:"Version,omitempty"`
	// Either compressed payload or raw data.
	// In raw form it is in this format:
	//
	//	[StrokesCount]struct{
	//	   Count uint16
	//	   Elems [Count]struct{
	//	     X        float16
	//	     Y        float16
	//	     Speed    float16 // Not sure
	//	     Pressure float16 // Not sure, always -1
	//	   }
	//	}
	Strokes []byte `protobuf:"bytes,8,opt,name=Strokes,proto3" json:"Strokes,omitempty"`
}

func (x *Handwriting) Reset() {
	*x = Handwriting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handwriting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Handwriting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handwriting) ProtoMessage() {}

func (x *Handwriting) ProtoReflect() protoreflect.Message {
	mi := &file_handwriting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handwriting.ProtoReflect.Descriptor instead.
func (*Handwriting) Descriptor() ([]byte, []int) {
	return file_handwriting_proto_rawDescGZIP(), []int{1}
}

func (x *Handwriting) GetSize() []byte {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Handwriting) GetFrame() []byte {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *Handwriting) GetStrokesCount() int64 {
	if x != nil {
		return x.StrokesCount
	}
	return 0
}

func (x *Handwriting) GetCompression() Compression {
	if x != nil {
		return x.Compression
	}
	return Compression_Unknown
}

func (x *Handwriting) GetDecompressedLength() int64 {
	if x != nil && x.DecompressedLength != nil {
		return *x.DecompressedLength
	}
	return 0
}

func (x *Handwriting) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Handwriting) GetStrokes() []byte {
	if x != nil {
		return x.Strokes
	}
	return nil
}

var File_handwriting_proto protoreflect.FileDescriptor

var file_handwriting_proto_rawDesc = []byte{
	0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0x77, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3a, 0x0a,
	0x0b, 0x48, 0x61, 0x6e, 0x64, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x61, 0x6e, 0x64, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x48, 0x61,
	0x6e, 0x64, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x97, 0x02, 0x0a, 0x0b, 0x48, 0x61,
	0x6e, 0x64, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x6f, 0x6b,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x68,
	0x61, 0x6e, 0x64, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x12, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x53, 0x74, 0x72, 0x6f, 0x6b, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x2a, 0x2c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x58, 0x5a, 0x10,
	0x04, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x74, 0x72, 0x79, 0x6d, 0x6f, 0x6f, 0x73, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x68, 0x61, 0x6e,
	0x64, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_handwriting_proto_rawDescOnce sync.Once
	file_handwriting_proto_rawDescData = file_handwriting_proto_rawDesc
)

func file_handwriting_proto_rawDescGZIP() []byte {
	file_handwriting_proto_rawDescOnce.Do(func() {
		file_handwriting_proto_rawDescData = protoimpl.X.CompressGZIP(file_handwriting_proto_rawDescData)
	})
	return file_handwriting_proto_rawDescData
}

var file_handwriting_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_handwriting_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_handwriting_proto_goTypes = []any{
	(Compression)(0),    // 0: handwriting.Compression
	(*BaseMessage)(nil), // 1: handwriting.BaseMessage
	(*Handwriting)(nil), // 2: handwriting.Handwriting
}
var file_handwriting_proto_depIdxs = []int32{
	2, // 0: handwriting.BaseMessage.Handwriting:type_name -> handwriting.Handwriting
	0, // 1: handwriting.Handwriting.Compression:type_name -> handwriting.Compression
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_handwriting_proto_init() }
func file_handwriting_proto_init() {
	if File_handwriting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_handwriting_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*BaseMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handwriting_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Handwriting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_handwriting_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_handwriting_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_handwriting_proto_goTypes,
		DependencyIndexes: file_handwriting_proto_depIdxs,
		EnumInfos:         file_handwriting_proto_enumTypes,
		MessageInfos:      file_handwriting_proto_msgTypes,
	}.Build()
	File_handwriting_proto = out.File
	file_handwriting_proto_rawDesc = nil
	file_handwriting_proto_goTypes = nil
	file_handwriting_proto_depIdxs = nil
}
